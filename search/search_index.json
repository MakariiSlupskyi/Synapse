{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Synapse","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Synapse is a simple C++ machine learning library designed to automate various aspects of the machine learning pipeline, from data preprocessing to model training. It provides a convenient interface for developers to integrate machine learning algorithms into their applications effortlessly.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can find Synapse's releases and source code on its GitHub page.</p> <p>To build Synapse on you own, navigate to its root directory and paste following commands:</p> <pre><code>mkdir build\ncd build\ncmake ..\ncmake --build .\n</code></pre> <p>This will generate a seperate <code>Synapse</code> directory with built binaries and examples. If you don't want to build examples, add this when building project:</p> <pre><code>cmake -DBUILD_EXAMPLES=False ..\ncmake --build .\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To check if Synapse works properly use this simple code example</p> <pre><code>#include &lt;Synapse/AI.h&gt;\n\nint main()\n{\n    syn::Data inputs({1, 1}, {{0}, {1}, {2}});\n    syn::Data labels({1, 1}, {{0}, {2}, {3}});\n\n    syn::Model model = syn::create(inputs, labels);\n    model.save(\"model.txt\");\n}\n</code></pre>"},{"location":"available/","title":"Available Functionality","text":""},{"location":"available/#synmodel-interface-reference","title":"syn::Model Interface Reference","text":"Method's Name Explanation <code>compile</code> Set optimizer and loss function <code>predict</code> Push some input to the model and get some output <code>train</code> Train the model <code>evaluate</code> Get the current loss value"},{"location":"available/#syndata-interface-reference","title":"syn::Data Interface Reference","text":"Method's Name Explanation <code>shuffle</code> Shuffle data <code>size</code> Get the size of the data <code>merge</code> Merge two data instances into a single one <code>extract</code> Get a part of the data"},{"location":"available/#layers","title":"Layers","text":"Name How to Call in Synapse Dense <code>syn::Dense(int nInput, int nOutput)</code> Activation <code>syn::Activation(const std::string&amp; type)</code> Convolutional <code>syn::Conv()</code>"},{"location":"available/#activation-functions","title":"Activation Functions","text":"Name How to Call in Synapse ReLU <code>\"relu\"</code> Leaky ReLU <code>\"leaky relu\"</code> Sigmoid <code>\"sigmoid\"</code>"},{"location":"available/#loss-functions","title":"Loss Functions","text":"Name How to Call in Synapse Mean Squared Error <code>\"MSE\"</code> Binary Cross-Entropy <code>\"BCE\"</code> Categorical Cross-Entropy <code>\"CCE\"</code>"},{"location":"available/#optimizers","title":"Optimizers","text":"Name How to Call in Synapse Gradient Descent <code>\"GD\"</code> Stochastic Gradient Descent <code>\"SGD\"</code>"},{"location":"docs/","title":"Documentation","text":"<p>This is a documentation page, where you can learn about all Synapse's most frequently utilized functionalities to be able to efficiently use it in your project.</p>"},{"location":"docs/#automated-model-creation","title":"Automated model creation","text":"<p>Following code example shows the basic usage of Synapse</p> <pre><code>#include &lt;Synapse/AI.h&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Prepare training data\n    syn::Data inputs({1, 1}, {{0}, {1}, {2}});\n    syn::Data labels({1, 1}, {{0}, {2}, {3}});\n\n    // Create and train new model!\n    syn::Model model = syn::create(inputs, labels);\n\n    // Save the model\n    model.save(\"model.txt\");\n\n    // Declare a very new model\n    syn::Model newModel;\n\n    // Load a first model's data to it\n    newModel.load(\"model.txt\");\n\n    // Use the new model to predict some values and print the results\n    std::cout &lt;&lt; newModel.predict(inputs[0]) &lt;&lt; std::endl;\n    std::cout &lt;&lt; newModel.predict(inputs[1]) &lt;&lt; std::endl;\n    std::cout &lt;&lt; newModel.predict(inputs[2]) &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"docs/#data-processing","title":"Data processing","text":"<pre><code>#include &lt;Synapse/AI.h&gt;\n\nint main() {\n    // Define training data\n    syn::Data inputs({\n        syn::Tensor({1, 6, 6}, {\n            0, 1, 1, 1, 1, 0,\n            1, 0, 0, 0, 0, 1,\n            1, 0, 0, 0, 0, 1,\n            1, 0, 0, 0, 0, 1,\n            1, 0, 0, 0, 0, 1,\n            0, 1, 1, 1, 1, 0,\n        }), syn::Tensor({1, 6, 6}, {\n            1, 0, 0, 0, 0, 1,\n            0, 1, 0, 0, 1, 0,\n            0, 0, 1, 1, 0, 0,\n            0, 0, 1, 1, 0, 0,\n            0, 1, 0, 0, 1, 0,\n            1, 0, 0, 0, 0, 1,\n        }),\n    });\n\n    ml::Data labels({\n        ml::Vector({1, 0}),\n        ml::Vector({0, 1}),\n    });\n\n    // Save training data\n    inputs.save(\"inputs.txt\");\n    labels.save(\"labels.txt\");\n\n    return 0;\n}\n</code></pre>"},{"location":"docs/#models-creation","title":"Models creation","text":"<pre><code>#include &lt;Synapse/AI.h&gt;\n\nint main()\n{\n    // FFNN\n    syn::Model first({\n        new syn::Dense(1, 5),\n        new syn::Activation(\"leaky relu\"),\n        new syn::Dense(5, 1),\n    });\n    first.compile(\"GD\", \"MSE\");\n\n    // CNN\n    ml::Model second({\n        new syn::Convolutional({1, 6, 6}, {3, 3}, 4), // input shape = {1, 6, 6} , kernel shape = {3, 3} , depth = 4\n        new syn::Pooling(2, 2), // strides = 2, pooling size = 2\n        new syn::Activation(\"ReLU\"),\n        new syn::Flatten(),\n        new syn::Dense(16, 2),\n        new syn::Activation(\"sigmoid\"),\n    });\n    second.compile(\"SGD\", \"MSE\");\n}\n</code></pre>"}]}